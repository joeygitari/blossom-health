{"ast":null,"code":"/**\n * @remix-run/router v1.14.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else if (isPathRelative) {\n    let fromSegments = routePathnames.length === 0 ? [] : routePathnames[routePathnames.length - 1].replace(/^\\//, \"\").split(\"/\");\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // With relative=\"path\", each leading .. segment means \"go up one URL segment\"\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        fromSegments.pop();\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = \"/\" + fromSegments.join(\"/\");\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // With relative=\"route\" (the default), each leading .. segment means\n      // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n      // difference from how <a href> works and a major reason we call this a\n      // \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(m => m.route.loader && m.route.loader.hydrate !== true && (loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined));\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        updateFetcherState(key, getLoadingFetcher(submission));\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (isInitialLoad) {\n      // On initial hydration we don't do any shouldRevalidate stuff - we just\n      // call the unhydrated loaders\n      return isUnhydratedRoute(state, match.route);\n    }\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n// Is this route unhydrated (when v7_partialHydration=true) such that we need\n// to call it's loader on the initial router creation\nfunction isUnhydratedRoute(state, route) {\n  if (!route.loader) {\n    return false;\n  }\n  if (route.loader.hydrate) {\n    return true;\n  }\n  return state.loaderData[route.id] === undefined && (!state.errors ||\n  // Loader ran but errored - don't re-run\n  state.errors[route.id] === undefined);\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        data = await result.json();\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };","map":{"version":3,"names":["_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","regexpSource","_","RegExp","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","fromSegments","toSegments","shift","routePathnameIndex","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","hydrate","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","getLoadingNavigation","Request","handleLoaders","fetcherSubmission","getSubmittingNavigation","actionMatch","getTargetMatch","type","method","routeId","callLoaderOrAction","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResult","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","reloadDocument","redirectHistoryAction","currentMatches","fetchersToLoad","all","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","query","_temp3","requestContext","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isQueryRouteResponse","isRedirectResponse","isRouteRequest","isStaticRequest","Location","context","loaderRequest","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","findIndex","isInitialLoad","currentUrl","nextUrl","navigationMatches","isUnhydratedRoute","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","resultType","onReject","runHandler","handler","handlerError","protocol","isSameBasename","queryRouteResponse","contentType","isDeferredData","_result$init","_result$init2","deferred","foundError","newLoaderData","mergedLoaderData","eligibleMatches","reverse","_temp5","errorMessage","obj","signals","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem","UNSAFE_DeferredData","UNSAFE_ErrorResponseImpl","UNSAFE_convertRouteMatchToUiMatch","UNSAFE_convertRoutesToDataRoutes","UNSAFE_getResolveToMatches","UNSAFE_invariant","UNSAFE_warning"],"sources":["/Users/joanne/Desktop/school/fourth-year/fourth-year-first-semester/computer-systems-project/project/blossom-health/node_modules/@remix-run/router/dist/router.js"],"sourcesContent":["/**\n * @remix-run/router v1.14.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i],\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    safelyDecodeURI(pathname));\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:(\\w+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = safelyDecodeURIComponent(value || \"\", paramName);\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:(\\w+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === matches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else if (isPathRelative) {\n    let fromSegments = routePathnames.length === 0 ? [] : routePathnames[routePathnames.length - 1].replace(/^\\//, \"\").split(\"/\");\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // With relative=\"path\", each leading .. segment means \"go up one URL segment\"\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        fromSegments.pop();\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = \"/\" + fromSegments.join(\"/\");\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      // With relative=\"route\" (the default), each leading .. segment means\n      // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n      // difference from how <a href> works and a major reason we call this a\n      // \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\n\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  let initialized;\n  let hasLazyRoutes = initialMatches.some(m => m.route.lazy);\n  let hasLoaders = initialMatches.some(m => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    initialized = initialMatches.every(m => m.route.loader && m.route.loader.hydrate !== true && (loaderData && loaderData[m.route.id] !== undefined || errors && errors[m.route.id] !== undefined));\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (ignoreNextHistoryUpdate) {\n        ignoreNextHistoryUpdate = false;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        ignoreNextHistoryUpdate = true;\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked\n            init.history.go(delta);\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      unstable_viewTransitionOpts: opts.viewTransitionOpts,\n      unstable_flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ; else if (pendingAction === Action.Pop) ; else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ; else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // Create a GET request for the loaders\n      request = new Request(request.url, {\n        signal: request.signal\n      });\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches\n    }, pendingActionData ? {\n      actionData: pendingActionData\n    } : {}, {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace = result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null\n      }, pendingActionData ? {\n        actionData: pendingActionData\n      } : {}, updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since iot's not a \"navigation\"\n    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {\n      revalidatingFetchers.forEach(rf => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState(_extends({\n        navigation: loadingNavigation\n      }, actionData ? Object.keys(actionData).length === 0 ? {\n        actionData: null\n      } : {\n        actionData\n      } : {}, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(state, redirect.result, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, flushSync, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, flushSync, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId\n      });\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our action started, so that\n        // should take precedence over this redirect navigation.  We already\n        // set isRevalidationRequired so all loaders for the new route should\n        // fire unless opted out via shouldRevalidate\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        updateFetcherState(key, getLoadingFetcher(submission));\n        return startRedirectNavigation(state, actionResult, {\n          fetcherSubmission: submission\n        });\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, {\n      [match.route.id]: actionResult.data\n    }, undefined // No need to send through errors since we short circuit above\n    );\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      if (fetchControllers.has(staleKey)) {\n        abortFetcher(staleKey);\n      }\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(results);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey = revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(state, redirect.result);\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, flushSync, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(state, result);\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(state, redirect, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    let redirectLocation = createLocation(state.location, redirect.location, {\n      _isRedirect: true\n    });\n    invariant(redirectLocation, \"Expected a location on the redirect navigation\");\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.reloadDocument) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(redirect.location)) {\n        const url = init.history.createURL(redirect.location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(redirect.location);\n        } else {\n          routerWindow.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: redirect.location\n        }),\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset\n      });\n    }\n  }\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map(f => {\n      if (f.matches && f.match && f.controller) {\n        return callLoaderOrAction(\"loader\", createClientSideRequest(init.history, f.path, f.controller.signal), f.match, f.matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath);\n      } else {\n        let error = {\n          type: ResultType.error,\n          error: getInternalRouterError(404, {\n            pathname: f.path\n          })\n        };\n        return error;\n      }\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(f => f.match), fetcherResults, fetchersToLoad.map(f => f.controller ? f.controller.signal : null), true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n        isStaticRequest: true,\n        isRouteRequest,\n        requestContext\n      });\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, requestContext, undefined, {\n        [boundaryMatch.route.id]: result.error\n      });\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, manifest, mapRouteProperties, basename, future.v7_relativeSplatPath, {\n      isStaticRequest: true,\n      isRouteRequest,\n      requestContext\n    }))]);\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError, activeDeferreds);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Add an ?index param for matched index routes if we don't already have one\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    if (isInitialLoad) {\n      // On initial hydration we don't do any shouldRevalidate stuff - we just\n      // call the unhydrated loaders\n      return isUnhydratedRoute(state, match.route);\n    }\n    if (match.route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (match.route.loader == null) {\n      return false;\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate:\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired ||\n      // Clicked the same link, resubmitted a GET form\n      currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (isInitialLoad || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        defaultShouldRevalidate: isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n// Is this route unhydrated (when v7_partialHydration=true) such that we need\n// to call it's loader on the initial router creation\nfunction isUnhydratedRoute(state, route) {\n  if (!route.loader) {\n    return false;\n  }\n  if (route.loader.hydrate) {\n    return true;\n  }\n  return state.loaderData[route.id] === undefined && (!state.errors ||\n  // Loader ran but errored - don't re-run\n  state.errors[route.id] === undefined);\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\nasync function callLoaderOrAction(type, request, match, matches, manifest, mapRouteProperties, basename, v7_relativeSplatPath, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  let resultType;\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    return Promise.race([handler({\n      request,\n      params: match.params,\n      context: opts.requestContext\n    }), abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let values = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadLazyRouteModule(match.route, mapRouteProperties, manifest)]);\n        if (handlerError) {\n          throw handlerError;\n        }\n        result = values[0];\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n        handler = match.route[type];\n        if (handler) {\n          // Handler still run even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            data: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  if (isResponse(result)) {\n    let status = result.status;\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n      // Support relative routing in internal redirects\n      if (!ABSOLUTE_URL_REGEX.test(location)) {\n        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match) + 1), basename, true, location, v7_relativeSplatPath);\n      } else if (!opts.isStaticRequest) {\n        // Strip off the protocol+origin for same-origin + same-basename absolute\n        // redirects. If this is a static request, we can let it go back to the\n        // browser as-is\n        let currentUrl = new URL(request.url);\n        let url = location.startsWith(\"//\") ? new URL(currentUrl.protocol + location) : new URL(location);\n        let isSameBasename = stripBasename(url.pathname, basename) != null;\n        if (url.origin === currentUrl.origin && isSameBasename) {\n          location = url.pathname + url.search + url.hash;\n        }\n      }\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (opts.isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n        reloadDocument: result.headers.get(\"X-Remix-Reload-Document\") !== null\n      };\n    }\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (opts.isRouteRequest) {\n      let queryRouteResponse = {\n        type: resultType === ResultType.error ? ResultType.error : ResultType.data,\n        response: result\n      };\n      throw queryRouteResponse;\n    }\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        data = await result.json();\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponseImpl(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init, _result$init2;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,\n      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n      } else {\n        loaderData[id] = result.data;\n      }\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      match,\n      controller\n    } = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index];\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return {\n        result,\n        idx: i\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isQueryRouteResponse(obj) {\n  return obj && isResponse(obj.response) && (obj.type === ResultType.data || obj.type === ResultType.error);\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(signal, \"Expected an AbortSignal for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, defer, generatePath, getStaticContextFromError, getToPathname, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, resolvePath, resolveTo, stripBasename };\n//# sourceMappingURL=router.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}